import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Sheet;

public class ExcelReader {
    public static void main(String[] args) {
        try {
            FileInputStream file = new FileInputStream("your_excel_file.xlsx");
            XSSFWorkbook workbook = new XSSFWorkbook(file);

            // Specify the sheet name you want to read
            String desiredSheetName = "your_sheet_name";
            Sheet sheet = workbook.getSheet(desiredSheetName);

            if (sheet == null) {
                System.out.println("Sheet '" + desiredSheetName + "' not found.");
                return;
            }

            Iterator<Row> rowIterator = sheet.iterator();

            Row headerRow = rowIterator.next();
            Map<Object, Object> dataMap = new HashMap<>();

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();

                // Find the column index for the desired country (e.g., England in column 8)
                int desiredCountryColumnIndex = findColumnIndex(headerRow, "England");

                if (desiredCountryColumnIndex >= 0) {
                    Cell keyCell = row.getCell(3); // Using the 4th column as the key column

                    // Check if the key cell is not null before trying to retrieve its value
                    if (keyCell != null) {
                        Object key = getCellValue(keyCell);

                        // Check if the desired country cell index is within bounds
                        if (desiredCountryColumnIndex < row.getLastCellNum()) {
                            Cell desiredCountryCell = row.getCell(desiredCountryColumnIndex);

                            // Check if the desired country cell is not null before retrieving its value
                            Object value = (desiredCountryCell != null) ? getCellValue(desiredCountryCell) : null;
                            dataMap.put(key, value);
                        } else {
                            // Handle the case where the desired country column index is out of bounds
                            System.out.println("Desired country column index out of bounds.");
                        }
                    }
                } else {
                    // Handle the case where the desired country column is not found
                    System.out.println("Desired country column not found.");
                }
            }

            // Now, dataMap contains key-value pairs for the dynamic key (4th column) and dynamic value (e.g., England in column 8).
            // You can iterate over the map to access the data.

            for (Map.Entry<Object, Object> entry : dataMap.entrySet()) {
                System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
            }

            workbook.close();
            file.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static int findColumnIndex(Row headerRow, String columnName) {
        Iterator<Cell> cellIterator = headerRow.cellIterator();
        int columnIndex = -1;

        while (cellIterator.hasNext()) {
            Cell cell = cellIterator.next();
            if (cell.getStringCellValue().equalsIgnoreCase(columnName)) {
                columnIndex = cell.getColumnIndex();
                break;
            }
        }

        return columnIndex;
    }

    private static Object getCellValue(Cell cell) {
        if (cell == null) {
            return null;
        }

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return cell.getNumericCellValue();
            default:
                return null;
        }
    }
}

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class ExcelReader {
    private XSSFWorkbook workbook;

    public ExcelReader(String filePath) {
        try {
            FileInputStream file = new FileInputStream(new File(filePath));
            workbook = new XSSFWorkbook(file);
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to load the Excel file: " + filePath);
        }
    }

    public Map<String, String> getData(String scenarioName) {
        String sheetName = determineSheetName(scenarioName);
        return getDataFromSheet(sheetName, scenarioName);
    }

    private String determineSheetName(String scenarioName) {
        for (Sheet sheet : workbook) {
            if (sheetContainsScenario(sheet, scenarioName)) {
                return sheet.getSheetName();
            }
        }
        throw new RuntimeException("Scenario '" + scenarioName + "' not found in any sheet.");
    }

    private boolean sheetContainsScenario(Sheet sheet, String scenarioName) {
        int scenarioColumnIndex = getScenarioColumnIndex(sheet);
        if (scenarioColumnIndex == -1) {
            return false;
        }
        
        for (Row row : sheet) {
            Cell cell = row.getCell(scenarioColumnIndex);
            if (cell != null && cell.getCellType() == CellType.STRING) {
                if (cell.getStringCellValue().equalsIgnoreCase(scenarioName)) {
                    return true;
                }
            }
        }
        return false;
    }

    private int getScenarioColumnIndex(Sheet sheet) {
        Row headerRow = sheet.getRow(0);
        if (headerRow == null) {
            throw new RuntimeException("Header row not found in sheet: " + sheet.getSheetName());
        }

        for (Cell cell : headerRow) {
            if (cell.getCellType() == CellType.STRING && cell.getStringCellValue().equalsIgnoreCase("scenario")) {
                return cell.getColumnIndex();
            }
        }

        throw new RuntimeException("Scenario column not found in sheet: " + sheet.getSheetName());
    }

    private Map<String, String> getDataFromSheet(String sheetName, String scenarioName) {
        Sheet sheet = workbook.getSheet(sheetName);
        Map<String, String> data = new HashMap<>();
        int scenarioColumnIndex = getScenarioColumnIndex(sheet);

        boolean scenarioFound = false;
        for (Row row : sheet) {
            Cell cell = row.getCell(scenarioColumnIndex);
            if (cell != null && cell.getCellType() == CellType.STRING && cell.getStringCellValue().equalsIgnoreCase(scenarioName)) {
                scenarioFound = true;
                for (Cell headerCell : sheet.getRow(0)) {
                    String header = headerCell.getStringCellValue();
                    String value = getCellValue(row.getCell(headerCell.getColumnIndex()));
                    data.put(header, value);
                }
                break;
            }
        }

        if (!scenarioFound) {
            throw new RuntimeException("Scenario '" + scenarioName + "' not found in sheet '" + sheetName + "'.");
        }

        return data;
    }

    private String getCellValue(Cell cell) {
        if (cell == null) {
            return "";
        }

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                } else {
                    return String.valueOf(cell.getNumericCellValue());
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                return cell.getCellFormula();
            case BLANK:
                return "";
            default:
                return "";
        }
    }
}
